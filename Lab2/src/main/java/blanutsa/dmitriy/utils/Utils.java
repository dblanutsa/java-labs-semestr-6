package blanutsa.dmitriy.utils;import blanutsa.dmitriy.errors.OrdersFormatException;import blanutsa.dmitriy.services.baseQuery.Order;import blanutsa.dmitriy.services.baseQuery.OrderType;import java.util.ArrayList;import java.util.List;import java.util.regex.Matcher;import java.util.regex.Pattern;public class Utils {    public static String toSnakeCase(String stringInCamelCase) {        StringBuilder result = new StringBuilder();        Pattern pattern = Pattern.compile("[A-Za-z][a-z0-9]*");        Matcher matcher = pattern.matcher(stringInCamelCase);        boolean isNext = matcher.find();        while (isNext) {            result.append(matcher.group().toLowerCase());            isNext = matcher.find();            if (isNext) result.append('_');        }        return result.toString();    }    public static List<Order> parseOrders(String orderString) {        String[] strOrders = orderString.split("[;,]");        Pattern pattern = Pattern.compile("[a-z][a-zA-Z0-9]*");        List<Order> orders = new ArrayList<>();        for (String strOrder : strOrders) {            String[] orderParts = strOrder.trim().split("\\s");            if (orderParts.length > 3 || orderParts.length < 1) {                throw new OrdersFormatException();            }            String fieldName = orderParts[0].trim();            if (!pattern.matcher(fieldName).matches()) {                throw new OrdersFormatException();            }            if (orderParts.length == 1) {                orders.add(new Order(fieldName, OrderType.ASC));            } else {                orders.add(new Order(fieldName, OrderType.valueOf(orderParts[1])));            }        }        return orders;    }}